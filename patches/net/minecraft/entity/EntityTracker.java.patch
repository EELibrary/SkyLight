--- ../src-base/minecraft/net/minecraft/entity/EntityTracker.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityTracker.java
@@ -2,8 +2,14 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentSkipListSet;
+
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
@@ -52,14 +58,14 @@
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final WorldServer world;
-    private final Set<EntityTrackerEntry> entries = Sets.<EntityTrackerEntry>newHashSet();
-    private final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
+    private final Set<EntityTrackerEntry> entries = ConcurrentHashMap.newKeySet();
+    public final IntHashMap<EntityTrackerEntry> trackedEntityHashTable = new IntHashMap<EntityTrackerEntry>();
     private int maxTrackingDistanceThreshold;
 
     public EntityTracker(WorldServer theWorldIn)
     {
         this.world = theWorldIn;
-        this.maxTrackingDistanceThreshold = theWorldIn.getMinecraftServer().getPlayerList().getEntityViewDistance();
+        this.maxTrackingDistanceThreshold = net.minecraft.server.management.PlayerChunkMap.getFurthestViewableBlock(theWorldIn.spigotConfig.viewDistance); // Spigot
     }
 
     public static long getPositionLong(double value)
@@ -77,6 +83,8 @@
 
     public void track(Entity entityIn)
     {
+        if (net.minecraftforge.fml.common.registry.EntityRegistry.instance().tryTrackingEntity(this, entityIn)) return;
+
         if (entityIn instanceof EntityPlayerMP)
         {
             this.track(entityIn, 512, 2);
@@ -196,7 +204,7 @@
         }
         else if (entityIn instanceof EntityAreaEffectCloud)
         {
-            this.track(entityIn, 160, Integer.MAX_VALUE, true);
+            this.track(entityIn, 160, 10 /*Integer.MAX_VALUE*/, true); // CraftBukkit
         }
         else if (entityIn instanceof EntityEnderCrystal)
         {
@@ -215,17 +223,21 @@
 
     public void track(Entity entityIn, int trackingRange, final int updateFrequency, boolean sendVelocityUpdates)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
+        trackingRange = org.spigotmc.TrackingRange.getEntityTrackingRange(entityIn, trackingRange); // Spigot
         try
         {
-            if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
-            {
-                throw new IllegalStateException("Entity is already tracked!");
+            synchronized(this.trackedEntityHashTable){
+                if (this.trackedEntityHashTable.containsItem(entityIn.getEntityId()))
+                {
+                    LOGGER.warn("Entity is already tracked!");
+                    this.trackedEntityHashTable.removeObject(entityIn.getEntityId());
+                }
+                EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
+                this.entries.add(entitytrackerentry);
+                this.trackedEntityHashTable.addKey(entityIn.getEntityId(), entitytrackerentry);
+                entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
             }
-
-            EntityTrackerEntry entitytrackerentry = new EntityTrackerEntry(entityIn, trackingRange, this.maxTrackingDistanceThreshold, updateFrequency, sendVelocityUpdates);
-            this.entries.add(entitytrackerentry);
-            this.trackedEntityHashTable.addKey(entityIn.getEntityId(), entitytrackerentry);
-            entitytrackerentry.updatePlayerEntities(this.world.playerEntities);
         }
         catch (Throwable throwable)
         {
@@ -262,6 +274,7 @@
 
     public void untrack(Entity entityIn)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entityIn instanceof EntityPlayerMP)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)entityIn;
@@ -271,35 +284,35 @@
                 entitytrackerentry.removeFromTrackedPlayers(entityplayermp);
             }
         }
+        synchronized(this.trackedEntityHashTable) {
+            EntityTrackerEntry entitytrackerentry1 = this.trackedEntityHashTable.removeObject(entityIn.getEntityId());
 
-        EntityTrackerEntry entitytrackerentry1 = this.trackedEntityHashTable.removeObject(entityIn.getEntityId());
-
-        if (entitytrackerentry1 != null)
-        {
-            this.entries.remove(entitytrackerentry1);
-            entitytrackerentry1.sendDestroyEntityPacketToTrackedPlayers();
+            if (entitytrackerentry1 != null) {
+                this.entries.remove(entitytrackerentry1);
+                entitytrackerentry1.sendDestroyEntityPacketToTrackedPlayers();
+            }
         }
     }
 
     public void tick()
     {
-        List<EntityPlayerMP> list = Lists.<EntityPlayerMP>newArrayList();
-
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
-            entitytrackerentry.updatePlayerList(this.world.playerEntities);
-
-            if (entitytrackerentry.playerEntitiesUpdated)
+        List<EntityPlayerMP> list = Collections.synchronizedList(Lists.<EntityPlayerMP>newArrayList());
+        synchronized (this.entries){
+            for (EntityTrackerEntry entitytrackerentry : this.entries)
             {
-                Entity entity = entitytrackerentry.getTrackedEntity();
+                entitytrackerentry.updatePlayerList(this.world.playerEntities);
 
-                if (entity instanceof EntityPlayerMP)
+                if (entitytrackerentry.playerEntitiesUpdated)
                 {
-                    list.add((EntityPlayerMP)entity);
+                    Entity entity = entitytrackerentry.getTrackedEntity();
+
+                    if (entity instanceof EntityPlayerMP)
+                    {
+                        list.add((EntityPlayerMP)entity);
+                    }
                 }
             }
         }
-
         for (int i = 0; i < list.size(); ++i)
         {
             EntityPlayerMP entityplayermp = list.get(i);
@@ -331,21 +344,42 @@
 
     public void sendToTracking(Entity entityIn, Packet<?> packetIn)
     {
-        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
+        synchronized(this.trackedEntityHashTable) {
+            EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
 
-        if (entitytrackerentry != null)
-        {
-            entitytrackerentry.sendPacketToTrackedPlayers(packetIn);
+            if (entitytrackerentry != null) {
+                entitytrackerentry.sendPacketToTrackedPlayers(packetIn);
+            }
         }
     }
 
+    /* ======================================== FORGE START =====================================*/
+
+    // don't expose the EntityTrackerEntry directly so mods can't mess with the data in there as easily
+    /**
+     * Get all players tracking the given Entity. The Entity must be part of the World that this Tracker belongs to.
+     * @param entity the Entity
+     * @return all players tracking the Entity
+     */
+    public Set<? extends net.minecraft.entity.player.EntityPlayer> getTrackingPlayers(Entity entity)
+    {
+        EntityTrackerEntry entry = (EntityTrackerEntry) trackedEntityHashTable.lookup(entity.getEntityId());
+        if (entry == null)
+            return java.util.Collections.emptySet();
+        else
+            return java.util.Collections.unmodifiableSet(entry.trackingPlayers);
+    }
+
+    /* ======================================== FORGE END   =====================================*/
+
     public void sendToTrackingAndSelf(Entity entityIn, Packet<?> packetIn)
     {
-        EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
+        synchronized(this.trackedEntityHashTable) {
+            EntityTrackerEntry entitytrackerentry = this.trackedEntityHashTable.lookup(entityIn.getEntityId());
 
-        if (entitytrackerentry != null)
-        {
-            entitytrackerentry.sendToTrackingAndSelf(packetIn);
+            if (entitytrackerentry != null) {
+                entitytrackerentry.sendToTrackingAndSelf(packetIn);
+            }
         }
     }
 
@@ -359,8 +393,8 @@
 
     public void sendLeashedEntitiesInChunk(EntityPlayerMP player, Chunk chunkIn)
     {
-        List<Entity> list = Lists.<Entity>newArrayList();
-        List<Entity> list1 = Lists.<Entity>newArrayList();
+        List<Entity> list = Collections.synchronizedList(Lists.<Entity>newArrayList());
+        List<Entity> list1 = Collections.synchronizedList(Lists.<Entity>newArrayList());
 
         for (EntityTrackerEntry entitytrackerentry : this.entries)
         {
@@ -401,11 +435,12 @@
 
     public void setViewDistance(int p_187252_1_)
     {
-        this.maxTrackingDistanceThreshold = (p_187252_1_ - 1) * 16;
+        synchronized(this) {
+            this.maxTrackingDistanceThreshold = (p_187252_1_ - 1) * 16;
 
-        for (EntityTrackerEntry entitytrackerentry : this.entries)
-        {
-            entitytrackerentry.setMaxRange(this.maxTrackingDistanceThreshold);
+            for (EntityTrackerEntry entitytrackerentry : this.entries) {
+                entitytrackerentry.setMaxRange(this.maxTrackingDistanceThreshold);
+            }
         }
     }
 }
