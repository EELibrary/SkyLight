--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityPiston.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityPiston.java
@@ -1,8 +1,12 @@
 package net.minecraft.tileentity;
 
 import com.google.common.collect.Lists;
+
+import java.util.Collections;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import com.google.common.util.concurrent.AtomicDouble;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockPistonBase;
 import net.minecraft.block.BlockPistonExtension;
@@ -35,8 +39,8 @@
             return null;
         }
     };
-    private float progress;
-    private float lastProgress;
+    private AtomicDouble progress = new AtomicDouble(0.0D);
+    private AtomicDouble lastProgress = new AtomicDouble(0.0D);
 
     public TileEntityPiston()
     {
@@ -88,7 +92,7 @@
             ticks = 1.0F;
         }
 
-        return this.lastProgress + (this.progress - this.lastProgress) * ticks;
+        return (float) (this.lastProgress.get() + (this.progress.get() - this.lastProgress.get()) * ticks);
     }
 
     @SideOnly(Side.CLIENT)
@@ -116,7 +120,7 @@
 
     public AxisAlignedBB getAABB(IBlockAccess p_184321_1_, BlockPos p_184321_2_)
     {
-        return this.getAABB(p_184321_1_, p_184321_2_, this.progress).union(this.getAABB(p_184321_1_, p_184321_2_, this.lastProgress));
+        return this.getAABB(p_184321_1_, p_184321_2_, (float) this.progress.get()).union(this.getAABB(p_184321_1_, p_184321_2_, (float)this.lastProgress.get()));
     }
 
     public AxisAlignedBB getAABB(IBlockAccess p_184319_1_, BlockPos p_184319_2_, float p_184319_3_)
@@ -134,8 +138,8 @@
     private void moveCollidedEntities(float p_184322_1_)
     {
         EnumFacing enumfacing = this.extending ? this.pistonFacing : this.pistonFacing.getOpposite();
-        double d0 = (double)(p_184322_1_ - this.progress);
-        List<AxisAlignedBB> list = Lists.<AxisAlignedBB>newArrayList();
+        double d0 = p_184322_1_ - this.progress.get();
+        List<AxisAlignedBB> list = Collections.synchronizedList(Lists.<AxisAlignedBB>newArrayList());
         this.getCollisionRelatedBlockState().addCollisionBoxToList(this.world, BlockPos.ORIGIN, new AxisAlignedBB(BlockPos.ORIGIN), list, (Entity)null, true);
 
         if (!list.isEmpty())
@@ -145,56 +149,45 @@
 
             if (!list1.isEmpty())
             {
-                boolean flag = this.pistonState.getBlock() == Blocks.SLIME_BLOCK;
+                boolean flag = this.pistonState.getBlock().isStickyBlock(this.pistonState);
 
-                for (int i = 0; i < list1.size(); ++i)
-                {
-                    Entity entity = list1.get(i);
-
-                    if (entity.getPushReaction() != EnumPushReaction.IGNORE)
-                    {
-                        if (flag)
-                        {
-                            switch (enumfacing.getAxis())
-                            {
+                for (Entity entity : list1) {
+                    if (entity.getPushReaction() != EnumPushReaction.IGNORE) {
+                        if (flag) {
+                            switch (enumfacing.getAxis()) {
                                 case X:
-                                    entity.motionX = (double)enumfacing.getFrontOffsetX();
+                                    entity.motionX = (double) enumfacing.getFrontOffsetX();
                                     break;
                                 case Y:
-                                    entity.motionY = (double)enumfacing.getFrontOffsetY();
+                                    entity.motionY = (double) enumfacing.getFrontOffsetY();
                                     break;
                                 case Z:
-                                    entity.motionZ = (double)enumfacing.getFrontOffsetZ();
+                                    entity.motionZ = (double) enumfacing.getFrontOffsetZ();
                             }
                         }
 
                         double d1 = 0.0D;
 
-                        for (int j = 0; j < list.size(); ++j)
-                        {
-                            AxisAlignedBB axisalignedbb1 = this.getMovementArea(this.moveByPositionAndProgress(list.get(j)), enumfacing, d0);
+                        for (AxisAlignedBB axisAlignedBB : list) {
+                            AxisAlignedBB axisalignedbb1 = this.getMovementArea(this.moveByPositionAndProgress(axisAlignedBB), enumfacing, d0);
                             AxisAlignedBB axisalignedbb2 = entity.getEntityBoundingBox();
 
-                            if (axisalignedbb1.intersects(axisalignedbb2))
-                            {
+                            if (axisalignedbb1.intersects(axisalignedbb2)) {
                                 d1 = Math.max(d1, this.getMovement(axisalignedbb1, enumfacing, axisalignedbb2));
 
-                                if (d1 >= d0)
-                                {
+                                if (d1 >= d0) {
                                     break;
                                 }
                             }
                         }
 
-                        if (d1 > 0.0D)
-                        {
+                        if (d1 > 0.0D) {
                             d1 = Math.min(d1, d0) + 0.01D;
                             MOVING_ENTITY.set(enumfacing);
-                            entity.move(MoverType.PISTON, d1 * (double)enumfacing.getFrontOffsetX(), d1 * (double)enumfacing.getFrontOffsetY(), d1 * (double)enumfacing.getFrontOffsetZ());
+                            entity.move(MoverType.PISTON, d1 * (double) enumfacing.getFrontOffsetX(), d1 * (double) enumfacing.getFrontOffsetY(), d1 * (double) enumfacing.getFrontOffsetZ());
                             MOVING_ENTITY.set(null);
 
-                            if (!this.extending && this.shouldHeadBeRendered)
-                            {
+                            if (!this.extending && this.shouldHeadBeRendered) {
                                 this.fixEntityWithinPistonBase(entity, enumfacing, d0);
                             }
                         }
@@ -242,7 +235,7 @@
 
     private AxisAlignedBB moveByPositionAndProgress(AxisAlignedBB p_190607_1_)
     {
-        double d0 = (double)this.getExtendedProgress(this.progress);
+        double d0 = (double)this.getExtendedProgress((float) this.progress.get());
         return p_190607_1_.offset((double)this.pos.getX() + d0 * (double)this.pistonFacing.getFrontOffsetX(), (double)this.pos.getY() + d0 * (double)this.pistonFacing.getFrontOffsetY(), (double)this.pos.getZ() + d0 * (double)this.pistonFacing.getFrontOffsetZ());
     }
 
@@ -308,9 +301,9 @@
 
     public void clearPistonTileEntity()
     {
-        if (this.lastProgress < 1.0F && this.world != null)
+        if (this.lastProgress.get() < 1.0D && this.world != null)
         {
-            this.progress = 1.0F;
+            this.progress.set(1.0D);
             this.lastProgress = this.progress;
             this.world.removeTileEntity(this.pos);
             this.invalidate();
@@ -325,9 +318,9 @@
 
     public void update()
     {
-        this.lastProgress = this.progress;
+        this.lastProgress.set(this.progress.get());
 
-        if (this.lastProgress >= 1.0F)
+        if (this.lastProgress.get() >= 1.0D)
         {
             this.world.removeTileEntity(this.pos);
             this.invalidate();
@@ -340,13 +333,13 @@
         }
         else
         {
-            float f = this.progress + 0.5F;
-            this.moveCollidedEntities(f);
-            this.progress = f;
+            double f = this.progress.get() + 0.5D;
+            this.moveCollidedEntities((float) f);
+            this.progress.set(f);
 
-            if (this.progress >= 1.0F)
+            if (this.progress.get() >= 1.0D)
             {
-                this.progress = 1.0F;
+                this.progress.set(1.0D);
             }
         }
     }
@@ -360,8 +353,8 @@
         super.readFromNBT(compound);
         this.pistonState = Block.getBlockById(compound.getInteger("blockId")).getStateFromMeta(compound.getInteger("blockData"));
         this.pistonFacing = EnumFacing.getFront(compound.getInteger("facing"));
-        this.progress = compound.getFloat("progress");
-        this.lastProgress = this.progress;
+        this.progress.set(compound.getFloat("progress"));
+        this.lastProgress.set(this.progress.get());
         this.extending = compound.getBoolean("extending");
         this.shouldHeadBeRendered = compound.getBoolean("source");
     }
@@ -372,7 +365,7 @@
         compound.setInteger("blockId", Block.getIdFromBlock(this.pistonState.getBlock()));
         compound.setInteger("blockData", this.pistonState.getBlock().getMetaFromState(this.pistonState));
         compound.setInteger("facing", this.pistonFacing.getIndex());
-        compound.setFloat("progress", this.lastProgress);
+        compound.setFloat("progress", (float) this.lastProgress.get());
         compound.setBoolean("extending", this.extending);
         compound.setBoolean("source", this.shouldHeadBeRendered);
         return compound;
@@ -387,21 +380,21 @@
 
         EnumFacing enumfacing = MOVING_ENTITY.get();
 
-        if ((double)this.progress >= 1.0D || enumfacing != (this.extending ? this.pistonFacing : this.pistonFacing.getOpposite()))
+        if (this.progress.get() >= 1.0D || enumfacing != (this.extending ? this.pistonFacing : this.pistonFacing.getOpposite()))
         {
             int i = p_190609_4_.size();
             IBlockState iblockstate;
 
             if (this.shouldPistonHeadBeRendered())
             {
-                iblockstate = Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.FACING, this.pistonFacing).withProperty(BlockPistonExtension.SHORT, Boolean.valueOf(this.extending != 1.0F - this.progress < 0.25F));
+                iblockstate = Blocks.PISTON_HEAD.getDefaultState().withProperty(BlockPistonExtension.FACING, this.pistonFacing).withProperty(BlockPistonExtension.SHORT, Boolean.valueOf(this.extending != 1.0F - ((float)this.progress.get()) < 0.25F));
             }
             else
             {
                 iblockstate = this.pistonState;
             }
 
-            float f = this.getExtendedProgress(this.progress);
+            float f = this.getExtendedProgress((float) this.progress.get());
             double d0 = (double)((float)this.pistonFacing.getFrontOffsetX() * f);
             double d1 = (double)((float)this.pistonFacing.getFrontOffsetY() * f);
             double d2 = (double)((float)this.pistonFacing.getFrontOffsetZ() * f);
